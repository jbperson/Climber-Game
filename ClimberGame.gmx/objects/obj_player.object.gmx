<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_block</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(changed_paths)
{
     //   show_message("yup")
       // show_message("pos:  " + string(x) + "," + string(y))
      //  show_message("Should be pos " + string(path_get_x(movement_path,path_position)) + "," + string(path_get_y(movement_path,path_position)))
        //changed_paths = false
        ccc = true
        
   /*     temp_pos = path_position
        temp_speed = path_speed
        path_end()
        x = path_get_x(movement_path,path_position)
        y = path_get_y(movement_path,path_position)
        path_start(movement_path,path_speed,2,true)
        path_position = temp_pos */
}


move_player() // Moves the player due to their own control.

if(ccc)
{

      //  show_message("yup2")
      //  show_message("pos:  " + string(x) + "," + string(y))
      //  show_message("Should be pos " + string(path_get_x(movement_path,path_position)) + "," + string(path_get_y(movement_path,path_position)))
        ccc = false
        changed_paths = false
        
        temp_pos = path_position
        temp_speed = changed_paths_temp_speed
    //    show_message("changed paths temp speed: " + string(changed_paths_temp_speed))
 //       show_message("0: " + string(x) + "," + string(y))
        path_end()
   //             show_message("1: " + string(x) + "," + string(y))
        x = path_get_x(movement_path,path_position)
        y = path_get_y(movement_path,path_position)
     //   show_message("2: " + string(x) + "," + string(y))
        path_start(movement_path,path_speed,2,true)
       // show_message("3: " + string(x) + "," + string(y))
        
        path_position = temp_pos 
                x = path_get_x(movement_path,path_position)
        y = path_get_y(movement_path,path_position)
  //      show_message("4 : " + string(x) + "," + string(y))
    //            show_message("pathposition :" + string(path_position))
        
        tomohawk = 1; 

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(tomohawk)
{
//    show_message("prerotTOMA")
  //  show_message("toma path pos " + string(path_position))
    //show_message("toma pos: " + string(x) + "," + string(y))
}

rotate_world()

if (movement_path == obj_world.associated_path &amp;&amp; movement_locked)
    make_player_world_path(1)
    
if(tomohawk)
{
  //  show_message("TOMA")
//    show_message("toma path pos " + string(path_position))
  //  show_message("toma pos: " + string(x) + "," + string(y))
    tomohawk = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initialization Actions

movement_locked = true // Signifies that the player is locked to a movement path
movement_controlled = true // Signifies that the player can control their movement - off when sliding, for example
movement_climbable_surface = false // When true, signifies that the player is on a climbable slope.
movement_currently_climbing = false //  when true, signifies that the player is on a slope that would not be walkable, but is climbable
movement_path = obj_world.associated_path//test_path_1 // sets starting movement path
changed_paths = false
ccc = false
tomohawk = 0;

jump_timer = 0

world_path_length = 3
make_player_world_path(1)

path_start(movement_path,0,2,false)

path_position = .5
held_key = 0
h_right_is_forward = 1
v_up_is_forward = 0

previous_direction = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>changed_paths = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TEST_check_world_adjacency_list()
show_message("Position:  " + string(x) + ", " + string(y))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
